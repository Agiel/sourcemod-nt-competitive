#define MENU_TIME 20 // How long to display panel menus for, in seconds

#define REASON_TECHNICAL 0
#define REASON_TIMEOUT 1

#define MAX_STEAMID_LENGTH 44

new String:g_tag[] = "[COMP]";
new String:g_teamName[][64] = {
	"Unassigned",
	"Spectator",
	"Jinrai",
	"NSF"
};
new String:g_livePlayers[MAXPLAYERS+1][MAX_STEAMID_LENGTH]; // Array for storing SteamIDs to allow disconnected players rejoining when live
new String:g_menuSoundOk[] = "buttons/button14.wav";
new String:g_menuSoundCancel[] = "buttons/combine_button7.wav";
//new String:g_soundLive[] = "buttons/button17.wav";
new String:g_kvPath[PLATFORM_MAX_PATH];

new g_assignedTeamWhenLive[MAXPLAYERS+1];
new g_jinraiScore;
new g_liveTimer = 5;
new g_loggingEnabled;
new g_nsfScore;
new g_pausingReason;
new g_pausingTeam;
new g_roundCount;
new g_spamTimerCount;
new g_unpauseTimer = 10;
new g_usedTimeouts[sizeof(g_teamName)];
new g_killVerbosity;
new g_playersAlive[sizeof(g_teamName)];
new g_timeSinceUnpausedForRejoin;
new g_limitLiveTeams;
new g_limitTeams;
new g_winner;

new Float:g_fRoundTime;

new bool:g_isAlltalkByDefault;
new bool:g_isExpectingOverride;
new bool:g_isExpectingUnPauseTimer;
new bool:g_isLive;
new bool:g_isPaused;
new bool:g_isReady[MAXPLAYERS+1];
new bool:g_isSourceTVRecording;
new bool:g_isSpawned[MAXPLAYERS+1];
new bool:g_isTeamReadyForUnPause[sizeof(g_teamName)]; // Unassigned, spec, jinrai, nsf
new bool:g_isWantingOverride[sizeof(g_teamName)]; // Unassigned, spec, jinrai, nsf
new bool:g_shouldPause;
new bool:g_shouldClientsRecord;

new Handle:g_hAlltalk;
new Handle:g_hCommsBehaviour;
new Handle:g_hCompetitionName;
new Handle:g_hForceCamera;
new Handle:g_hLogMode;
new Handle:g_hMatchSize;
new Handle:g_hMaxPauseLength;
new Handle:g_hMaxTimeouts;
new Handle:g_hNeoRestartThis;
new Handle:g_hPausable;
new Handle:g_hRoundLimit;
new Handle:g_hSourceTVEnabled;
new Handle:g_hSourceTVPath;
new Handle:g_hJinraiName;
new Handle:g_hNSFName;
new Handle:g_hKillVersobity;
new Handle:g_hClientRecording;
new Handle:g_hLimitLiveTeams;
new Handle:g_hLimitTeams;

public Action:CheckIfEveryoneIsReady()
{	
	new players = Client_GetCount(true, true); // countInGameOnly, countFakeClients
	
	if ( IsSourceTVBotConnected() ) // We don't want to consider SourceTV as a player
	{
		players--;
	}
	
	new playersReady = GetPlayersReady();
	
	#if DEBUG
		PrintToServer("%s Players found total: %i", g_tag, players);
		PrintToServer("%s Players ready: %i", g_tag, playersReady);
	#endif
	
	if (players > playersReady) // Everyone isn't ready, stop here
		return Plugin_Stop;
	
	if (players < playersReady)
		LogError("More players ready than there are players total.");
	
	if ( players < GetConVarInt(g_hMatchSize) && g_limitTeams ) // Everyone connected is ready, but there are less people than expected
	{
		g_isExpectingOverride = true;
		PrintToChatAll("%s Waiting for %i more players to join.", g_tag, (GetConVarInt(g_hMatchSize) - players));
		PrintToChatAll("To start the match without %i players, both teams must !start", GetConVarInt(g_hMatchSize));
		
		return Plugin_Stop;
	}
	
	else if ( players > GetConVarInt(g_hMatchSize) && g_limitTeams ) // Everyone connected is ready, but there are more people than expected
	{
		g_isExpectingOverride = true;
		PrintToChatAll("%s There are %i more players than expected.", g_tag, (players - GetConVarInt(g_hMatchSize)));
		PrintToChatAll("To force the match start with %i players, both teams must !start", players);
		
		return Plugin_Stop;
	}
	
	LiveCountDown(); // Passed all checks, ready to go live
	
	return Plugin_Handled;
}

public Action:Command_ReadyList(client, args)
{
	if (!Client_IsValid(client))
		return Plugin_Stop;
	
	PrintToChat(client, "%s List of readied players is printed in your console.", g_tag);
	
	PrintToConsole(client, "\n%s Players and their READY state:", g_tag);
	for (new i = 1; i <= MaxClients; i++)
	{
		if (!Client_IsValid(i))
			continue;
		
		new team = GetClientTeam(i);
		
		if (team != TEAM_JINRAI && team != TEAM_NSF)
			continue;
		
		new String:clientName[MAX_NAME_LENGTH];
		GetClientName(i, clientName, sizeof(clientName));
		
		if (g_isReady[i])
			PrintToConsole(client, "[READY]\t%s", clientName);
		
		else
			PrintToConsole(client, "[NOT READY]\t%s", clientName);
	}
	PrintToConsole(client, "\n");
	
	return Plugin_Handled;
}

public Action:Command_IgnoreTeams(client, args)
{
	if (g_limitLiveTeams)
	{
		SetConVarInt(g_hLimitLiveTeams, 0);
		ReplyToCommand(client, "Now ignoring team change protection.");
	}
	
	else
	{
		SetConVarInt(g_hLimitLiveTeams, 1);
		ReplyToCommand(client, "Enforcing teams.");
	}
	
	return Plugin_Handled;
}

public Action:ToggleRecording()
{
	if (!g_shouldClientsRecord)
		return Plugin_Stop;
	
	if (g_isLive) // Start recording
	{
		for (new i = 1; i <= MaxClients; i++)
		{
			if (!Client_IsValid(i) || IsFakeClient(i))
				continue;
			
			new String:steamID[MAX_STEAMID_LENGTH];
			GetClientAuthId(i, AuthId_Steam2, steamID, sizeof(steamID));
			
			new String:timestamp[15];
			FormatTime(timestamp, sizeof(timestamp), "%Y%m%d-%H%M");
			
			new String:competitionName[32];
			GetConVarString(g_hCompetitionName, competitionName, sizeof(competitionName));
			
			new String:replayName[sizeof(steamID)+sizeof(timestamp)+sizeof(competitionName)+2];
			
			if (strlen(competitionName) > 0)
				Format(replayName, sizeof(replayName), "%s_%s_%s", competitionName, timestamp, steamID);
			
			else
				Format(replayName, sizeof(replayName), "%s_%s", timestamp, steamID);
			
			// Clean up any non alphanumeric characters from the string
			new String:replayBuffer[sizeof(replayName) + 1];
			new bufferPos;
			
			for (new j = 0; j < sizeof(replayName); j++)
			{
				if (IsCharAlpha(replayName[j]) || IsCharNumeric(replayName[j]) || !IsCharSpace(replayName[j]))
					replayBuffer[bufferPos++] = replayName[j];
			}
			replayBuffer[bufferPos] = '\0'; // Terminate the string with 0
			
			ReplaceString(replayBuffer, sizeof(replayBuffer), ":", ""); // Remove : characters from the SteamID. To-do: proper sanitization
			strcopy(replayName, sizeof(replayName), replayBuffer);
			
			ClientCommand(i, "stop"); // Stop any previous recording, jic. This does nothing if a demo isn't running.
			ClientCommand(i, "record %s", replayName); // Start recording. Format demo filename here. Note: replays can be overwritten using this.
			
			#if DEBUG > 1
				ClientCommand(i, "say Debug message: This client is now recording to %s", replayName);
			#endif
		}
	}
	
	else // Stop recording
	{		
		for (new i = 1; i <= MaxClients; i++)
		{
			if (!Client_IsValid(i) || IsFakeClient(i))
				continue;
			
			ClientCommand(i, "stop");
			
			#if DEBUG > 1
				ClientCommand(i, "say Debug message: This client has stopped recording");
			#endif
		}
	}
	
	return Plugin_Handled;
}

public Action:LiveCountDown()
{
	CreateTimer(1.0, Timer_Live_SecondsCountdown, _, TIMER_REPEAT); // This repeat timer is killed inside the callback
	CreateTimer((float(g_liveTimer) + 1.0), Timer_GoLive);
}

public Action:Timer_GoLive(Handle:timer)
{
	ToggleLive();
}

public Action:ToggleLive()
{
	if (!g_isLive)
	{
		g_isLive = true; // Flip live bool
		g_winner = 0; // Reset winner (overlay module queries this value)
		
		#if DEBUG
			PrintToServer("Creating SteamID array of players...");
			new foundPlayers;
		#endif
		
		// Save connected players' SteamIDs so they can be allowed to rejoin their teams if disconnected
		for (new i = 1; i <= MaxClients; i++)
		{
			if (!Client_IsValid(i) || IsFakeClient(i) ||!IsClientInGame(i))
				continue;
			
			if (!IsClientAuthorized(i))
			{
				new String:clientName[MAX_NAME_LENGTH];
				GetClientName(i, clientName, sizeof(clientName));
				PrintToChatAll("%s Player \"%s\" has no SteamID authorized yet! Stopped going live. Please try again in a moment.");
				PrintToServer("%s Player \"%s\" has no SteamID authorized yet! Stopped going live. Please try again in a moment.");
				
				g_isLive = false;
				
				return Plugin_Stop;
			}
			
			new String:steamID[MAX_STEAMID_LENGTH];
			GetClientAuthId(i, AuthId_Steam2, steamID, sizeof(steamID));
			PrintToServer("SteamID of %i: %s", i, steamID);
			new team = GetClientTeam(i);
			
			if (strlen(steamID) == 0)
			{
				LogError("Client %i returned empty SteamID, probably not authorized whilst attempting to save SteamID into g_livePlayers!", i);
				continue;
			}
			
			else
			{
				strcopy(g_livePlayers[i], sizeof(g_livePlayers[]), steamID);
				PrintToServer("sizeof g_livePlayers: %i", sizeof(g_livePlayers[]));
				g_assignedTeamWhenLive[i] = team;
			}
			
			#if DEBUG > 1
				if (strlen(steamID) > 0)
				{
					PrintToServer("Found SteamID: %s", steamID);
					PrintToServer("Saved to array as: %s, team %s", g_livePlayers[i], g_teamName[g_assignedTeamWhenLive[i]]);
					foundPlayers++;
				}
			#endif
		}
		
		#if DEBUG
			PrintToServer("Completed SteamID array with %i results.", foundPlayers);
		#endif
		
		if (foundPlayers < 2)
			LogError("Less than 2 players found!");
		
		// Set convars for competitive
		SetConVarInt(g_hAlltalk, GetDesiredCommsBehaviour());
		SetConVarBool(g_hPausable, false);
		SetConVarBool(g_hForceCamera, true);
		
		NeoRestartThis();
		
		g_loggingEnabled = GetConVarBool(g_hLogMode);
		
		ToggleRecording();
		
		// Announce game start, possible tournament name, and teams
		new String:competitionName[32];
		GetConVarString(g_hCompetitionName, competitionName, sizeof(competitionName));
		
		if (strlen(competitionName) < 1)
			strcopy(competitionName, sizeof(competitionName), "Competitive Neotokyo");
		
		new String:liveTitle[sizeof(g_tag) + sizeof(competitionName) + sizeof(g_teamName[]) * 2 + 6];
		
		Format(liveTitle, sizeof(liveTitle), "%s %s: %s - %s", g_tag, competitionName, g_teamName[TEAM_JINRAI], g_teamName[TEAM_NSF]);
		
		PrintToChatAll(liveTitle);
		
		#if DEBUG
			// Create match keyvalues (to-do: load previous game after cancel/servercrash/etc)
			// We could later use md5 (smlib) hash for id inside kv meta
			new Handle:kv = CreateKeyValues("competitive_match", "match_id", "debugID1"); // name, firstKey, firstValue
			
			KvGotoFirstSubKey(kv);
			KvSetNum(kv, "round", 1);
			
			KvSetSectionName(kv, "testing");
			KvSetNum(kv, "anotherVal", 5);
			
			new String:timestamp[15];
			FormatTime(timestamp, sizeof(timestamp), "%Y%m%d-%H%M");
			
			new String:kvFilePath[PLATFORM_MAX_PATH] = "matchDebug.kv";
			Format(kvFilePath, sizeof(kvFilePath), "%s/%s_%s", g_kvPath, timestamp, kvFilePath);
			
			KeyValuesToFile(kv, kvFilePath);
			CloseHandle(kv);
		#endif
		// End kv debug
		
		SpamTimer();
	}
	
	else
	{
		g_isLive = false;
		
		if (g_isPaused)
			TogglePause();
		
		ToggleRecording();
		
		SetConVarBool(g_hForceCamera, false);
		
		ResetGlobalVariables();
		
		PrintToChatAll("%s Match has ended.", g_tag);
	}
	
	ToggleSourceTV(); // This has to be called after modifying the g_isLive boolean
	
	return Plugin_Handled;
}

public Action:NeoRestartThis()
{
	SetConVarBool(g_hNeoRestartThis, true);
	
	for (new i = 1; i <= MaxClients; i++)
	{
		if (!Client_IsValid(i))
			continue;
		
		SetPlayerRank(i, 0); // We need to manually set everyone to private class to avoid a bug where players could spawn without a primary weapon
	}
}

public Action:TogglePause()
{
	if (!g_isPaused)
	{
		if (!g_isLive)
		{
			LogError("Attempted to pause while match isn't live.");
			return Plugin_Handled;
		}
		
		if (g_pausingReason == REASON_TIMEOUT)
			g_usedTimeouts[g_pausingTeam]++;
		
		g_isPaused = true;
		g_isExpectingUnPauseTimer = true;
		
		PrintToChatAll("%s Pause maximum duration: %i seconds.", g_tag, GetConVarInt(g_hMaxPauseLength));
		PrintToChatAll("%s Use !pause when ready.", g_tag);
		
		#if DEBUG > 1
			PrintToServer("%s Pause duration: %i seconds.", g_tag, GetConVarInt(g_hMaxPauseLength));
		#endif
		
		CreateTimer((1.0 + GetConVarFloat(g_hMaxPauseLength)), Timer_Unpause); // Add 1 second to timer for messages to appear in a logical order during countdown
		
		if ((GetConVarFloat(g_hMaxPauseLength) / 2) > 10.0) // Don't bother with "half of pause time remaining" notice if there's less than 10 secs remaining
			CreateTimer((GetConVarFloat(g_hMaxPauseLength) / 2), Timer_UnpauseNotice_Half);
		
		CreateTimer((GetConVarFloat(g_hMaxPauseLength) - float(g_unpauseTimer)), Timer_StartTenSecondsLeft);
	}
	
	else
	{
		// Close any open unpause timer, countdown timer, and half countdown timer handles below
		if (!g_isExpectingUnPauseTimer)
			LogError("Unpause timer executed unexpectedly.");
		
		g_isPaused = false;
		g_isExpectingUnPauseTimer = false;
		
		if (g_isLive) // Only announce the unpause if a match is still going
		{
			SpamTimer();
		}
	}
	
	SetConVarBool(g_hPausable, true);
	
	CreateTimer(0.5, Timer_TogglePauseLoop);
	
	return Plugin_Handled;
}

public Action:Command_UnpauseOther(client, args) // Pretend the other team made an unpause request. Debug command.
{
	if (client == 0)
	{
		ReplyToCommand(client, "%s This command can't be executed by the server.", g_tag);
		return Plugin_Stop;
	}
	
	new bool:foundSomeoneInOtherTeam;
	new team = GetClientTeam(client);
	new otherTeam = GetOtherTeam(team);
	
	for (new i = 1; i <= MaxClients; i++)
	{
		if (!Client_IsValid(i))
			continue;
		
		new forLoopTeam = GetClientTeam(i);
		if (forLoopTeam == otherTeam)
		{
			foundSomeoneInOtherTeam = true;
			UnPauseRequest(i); // Make someone from the other team perform an unpause request
			break;
		}
	}
	
	if (!foundSomeoneInOtherTeam)
		ReplyToCommand(client, "%s Debug: Could not find any players in the other team to fake unpause.", g_tag);
	else
		ReplyToCommand(client, "%s Debug: Faked unpause request from the other team.", g_tag);
	
	return Plugin_Handled;
}

public Action:Command_OverrideStartOther(client, args) // Pretend the other team made a force start request. Debug command.
{
	new bool:foundSomeoneInOtherTeam;
	new team = GetClientTeam(client);
	new otherTeam = GetOtherTeam(team);
	
	for (new i = 1; i <= MaxClients; i++)
	{
		if (!Client_IsValid(i))
			continue;
		
		new forLoopTeam = GetClientTeam(i);
		if (forLoopTeam == otherTeam)
		{
			foundSomeoneInOtherTeam = true;
			Command_OverrideStart(i, 0); // Make someone from the other team perform a force start request. Args (0) not used, but the command expects them.
			break;
		}
	}
	
	if (!foundSomeoneInOtherTeam)
		ReplyToCommand(client, "%s Debug: Could not find any players in the other team to fake force start.", g_tag);
	else
		ReplyToCommand(client, "%s Debug: Faked force start request from the other team.", g_tag);
	
	return Plugin_Handled;
}

public Action:Timer_TogglePauseLoop(Handle:timer)
{
	TogglePauseLoop();
	
	return Plugin_Stop;
}

public Action:TogglePauseLoop()
{
	new invalidClients;
	new unspawnedClients[2];
	new bool:forcePause;
	
	for (new i = 1; i <= MaxClients; i++) // The server can't exec "pause" for some reason. So, instead, use the first valid client to execute it.
	{
		unspawnedClients[0] = unspawnedClients[1];
		if (Client_IsValid(i))
		{
			if (IsFakeClient(i))
			{
				invalidClients++;
				continue;
			}
			
			if (!g_isSpawned[i])
				unspawnedClients[1]++;
			
			// Match is about to start, give up and ask any valid client to issue the pause
			if (forcePause || unspawnedClients[1] <= unspawnedClients[0])
			{				
				ClientCommand(i, "pause");
				
				#if DEBUG > 1
					if (forcePause)
						PrintToServer("Force pause detected.");
					
					new String:clientName[MAX_NAME_LENGTH];
					GetClientName(i, clientName, sizeof(clientName));
					PrintToServer("Found client to toggle pause. Client int: %i, name: %s", i, clientName);
				#endif
				
				CreateTimer(0.05, Timer_DisablePause); // Pausable cvar toggling is too fast to register the pause without a tiny delay here. 0.01 was occasionally too fast, 0.05 seems pretty safe.
				
				break;
			}
		}
		
		else
			invalidClients++;
		
		// Try to find a spawned real player so the pause command definitely goes through
		// Todo: Confirm if unspawned clients can actually issue a pause command (in which case this is redundant)
		if (i == MaxClients && unspawnedClients[1] > 0) // This will keep looping in 1 second intervals for as long as there are valid unspawned clients
		{
			#if DEBUG > 1
					PrintToServer("Found %i invalid clients. Found %i valid unspawned clients.", invalidClients, unspawnedClients[1]);
			#endif
			
			if (GetGameTime() > g_fRoundTime + 13.9)
			{
				forcePause = true;
				i = 0; // Reset loop
				
				#if DEBUG > 1
					PrintToServer("New round is about to start! Force any valid client to toggle pause...");
				#endif
				
				continue;
			}
			
			CreateTimer(1.0, Timer_TogglePauseLoop);
			
			#if DEBUG > 1
				PrintToServer("No valid spawned client found. Restarting loop in TogglePauseLoop");
			#endif
		}
		
		else if (invalidClients == MaxClients)
		{
			LogError("Attempted pause command whilst no valid clients were connected inside TogglePause. This shouldn't happen.");
			PrintToChatAll("%s Pause failed! Check plugin logs for details.", g_tag);
			break; // Things got weird, let's get out of here
		}
	}
}

public Action:Timer_TogglePause(Handle:timer)
{
	TogglePause();
}

public Action:Timer_DisablePause(Handle:timer)
{
	SetConVarBool(g_hPausable, false);
}

public Action:Timer_SpamLive(Handle:timer)
{
	// Print the LIVE message X times, then kill the repeat timer calling this
	new spamLiveTimes = 5;
	g_spamTimerCount++;
	
	if (g_spamTimerCount == 1) // Don't spam "LIVE" during the first increment. This has to do with chat message ordering (round number msgs) during match start, in Event_RoundStart.
		return Plugin_Continue;
	
	else if (g_spamTimerCount <= (spamLiveTimes + 1)) // spamLiveTimes+1, because we won't trigger during first increment (see comment above)
		PrintToChatAll("%s LIVE", g_tag);
	
	else
	{
		g_spamTimerCount = 0;
		return Plugin_Stop;
	}
	
	return Plugin_Continue;
}

public Action:SpamTimer()
{
	CreateTimer(0.25, Timer_SpamLive, _, TIMER_REPEAT); // This repeat timer is killed inside the callback after X repeats
}

public Action:Timer_Unpause(Handle:timer)
{
	if (g_isPaused)
	{
		PrintToChatAll("%s Maximum pause time has ended!", g_tag);
		TogglePause();
		
		return Plugin_Stop;
	}
	
	return Plugin_Continue;
}

public Action:Timer_UnpauseNotice_Half(Handle:timer)
{
	// Show notification when half of the max pause time has elapsed
	if (g_isPaused)
	{
		PrintToChatAll("%s Pause time left: %i seconds", g_tag, (RoundToNearest(GetConVarFloat(g_hMaxPauseLength)) / 2));
		return Plugin_Continue;
	}
	
	return Plugin_Stop;
}

public Action:Timer_StartTenSecondsLeft(Handle:timer)
{
	CreateTimer(1.0, Timer_Unpause_SecondsCountdown, _, TIMER_REPEAT); // This repeat timer is killed inside the callback
	
	return Plugin_Stop;
}

public Action:Timer_Live_SecondsCountdown(Handle:timer)
{
	if (g_liveTimer > 0)
	{
		PrintToChatAll("%s Match starting in: %i", g_tag, g_liveTimer);
		g_liveTimer--;
		
		return Plugin_Continue;
	}
	
	g_liveTimer = 5; // Reset variable. Countdown from this many seconds
	
	return Plugin_Stop;
}

public Action:Timer_Unpause_SecondsCountdown(Handle:timer)
{
	if (!g_isLive || !g_isPaused) // Pause has properly ended or the match is not live anymore
		return Plugin_Stop;
	
	if (g_unpauseTimer > 0)
	{
		//PlayLiveBeep(); Does not work whilst paused
		PrintToChatAll("%s Unpausing in: %i", g_tag, g_unpauseTimer);
		g_unpauseTimer--;
		
		return Plugin_Continue;
	}
	
	g_unpauseTimer = 10; // Countdown from this many seconds
	
	return Plugin_Stop;
}

public InitDirectory(const String:sDir[])
{
	decl String:sPieces[32][PLATFORM_MAX_PATH];
	new String:sPath[PLATFORM_MAX_PATH];
	new iNumPieces = ExplodeString(sDir, "/", sPieces, sizeof(sPieces), sizeof(sPieces[]));
	
	for(new i = 0; i < iNumPieces; i++)
	{
		Format(sPath, sizeof(sPath), "%s/%s", sPath, sPieces[i]);
		if(!DirExists(sPath))
			CreateDirectory(sPath, 509); // Note that folders must have the execute bit set on Linux. On Windows, the mode is ignored.
	}
}

public Action:ToggleSourceTV()
{
	if (g_isSourceTVRecording)
	{
		ServerCommand("tv_stoprecord");
		g_isSourceTVRecording = false;
		
		#if DEBUG
			PrintToServer("ToggleSourceTV: tv_stoprecord");
		#endif
	}
	
	else
	{
		if (!GetConVarBool(g_hSourceTVEnabled) || !g_isLive)
			return Plugin_Stop;
		
		if (!IsSourceTVBotConnected())
		{
			#if DEBUG
				PrintToServer("ToggleSourceTV: SourceTV bot not found.");
			#endif
			
			return Plugin_Stop;
		}
		
		new String:demoPath[PLATFORM_MAX_PATH];
		new String:timestamp[16];
		new String:mapName[32];
		
		GetConVarString(g_hSourceTVPath, demoPath, sizeof(demoPath));
		GetCurrentMap(mapName, sizeof(mapName));
		
		FormatTime(timestamp, sizeof(timestamp), "%Y%m%d-%H%M");
		
		new String:competitionName[32];
		GetConVarString(g_hCompetitionName, competitionName, sizeof(competitionName));
		
		new String:replayName[sizeof(mapName)+sizeof(timestamp)+sizeof(competitionName)+2];
		
		if (strlen(competitionName) > 0)
			Format(replayName, sizeof(replayName), "%s_%s_%s", competitionName, timestamp, mapName);
		
		else
			Format(replayName, sizeof(replayName), "%s_%s", timestamp, mapName);
		
		// Clean up any non alphanumeric characters from the string
		new String:replayBuffer[sizeof(replayName) + 1];
		new bufferPos;
		
		for (new j = 0; j < sizeof(replayName); j++)
		{
			if (IsCharAlpha(replayName[j]) || IsCharNumeric(replayName[j]) || !IsCharSpace(replayName[j]))
				replayBuffer[bufferPos++] = replayName[j];
		}
		replayBuffer[bufferPos] = '\0'; // Terminate the string with 0
		
		ReplaceString(replayBuffer, sizeof(replayBuffer), ":", ""); // Remove : characters from the SteamID. To-do: proper sanitazion
		strcopy(replayName, sizeof(replayName), replayBuffer);
		
		ServerCommand("tv_stoprecord"); // Stop any previous server record
		ServerCommand("tv_record \"%s/%s\"", demoPath, replayName); // SourceTV bot needs to be connected for this to do anything. This is checked above with IsSourceTVBotConnected()
		g_isSourceTVRecording = true;
		
		#if DEBUG
			PrintToServer("ToggleSourceTV: tv_record \"%s/%s\"", demoPath, replayName);
		#endif
	}
	
	return Plugin_Handled;
}

/* This doesn't work when the game is paused. Come up with some alternative?
public Action:PlayLiveBeep()
{
	new Float:volume = 0.5; // Volume between 0.0 - 1.0
	
	PrecacheSound(g_soundLive);
	EmitSoundToAll(g_soundLive, _, _, _, _, volume);
}
*/

bool:IsSourceTVBotConnected()
{
	// Get the SourceTV bot's name cvar, and figure out if bot is connected
	new Handle:hBotName = FindConVar("tv_name");
	new String:botName[MAX_NAME_LENGTH];
	GetConVarString(hBotName, botName, sizeof(botName));
	CloseHandle(hBotName);
	
	#if DEBUG > 1
		PrintToServer("Looking for a SourceTV bot...");
	#endif
	
	for (new i = 1; i <= MaxClients; i++)
	{
		if (!Client_IsValid(i) || !IsFakeClient(i)) // We are looking for a valid fake client (bot)
			continue;
		
		new String:clientName[MAX_NAME_LENGTH];
		GetClientName(i, clientName, sizeof(clientName));
		
		#if DEBUG > 1
			PrintToServer("Found valid fake client, index: %i, name: %s", i, clientName);
		#endif
		
		if (StrEqual(clientName, botName) || StrEqual(clientName, "SourceTV")) // Also check for default name "SourceTV", because sometimes tv_name doesn't work when bot first spawns
		{			
			#if DEBUG > 1
				PrintToServer("Fake client name %s matches tv_name cvar %s or \"SourceTV\"", clientName, botName);
			#endif
			
			return true;
		}
	}
	
	return false;
}

stock GetPlayersReady()
{
	new playersReady;

	for (new i = 1; i <= MaxClients; i++)
	{
		if (!Client_IsValid(i) || !g_isReady[i]) // Fake clients are never ready, so we don't need to explicitly check for them
			continue;
		
		playersReady++;
	}
	
	return playersReady;
}

stock GetDesiredCommsBehaviour()
{
	new behaviour = GetConVarInt(g_hCommsBehaviour); // 0: disable alltalk, 1: enable alltalk, 2: use whichever initial alltalk value (tracked with g_isAlltalkByDefault)
	
	if (behaviour <= 1)
		return behaviour;
	
	else
		return g_isAlltalkByDefault;
}

stock GetOtherTeam(team)
{
	new otherTeam;
	
	if (team == TEAM_JINRAI)
		otherTeam = TEAM_NSF;
	
	else if (team == TEAM_NSF)
		otherTeam = TEAM_JINRAI;
	
	else
	{
		LogError("Requested other team for invalid team (%i), returning -1 instead.");
		otherTeam = -1;
	}
	
	return otherTeam;
}

public Action:LogCompetitive(const String:message[])
{
	if (!g_loggingEnabled)
		return Plugin_Stop;
	
	new String:loggingPath[PLATFORM_MAX_PATH];
	BuildPath(Path_SM, loggingPath, sizeof(loggingPath), "logs/competitive");
	
	new String:debugFile[] = "logfile.log"; // Static debug file for logging. We later want to use keyvalues using match IDs etc
	Format(loggingPath, sizeof(loggingPath), "%s/%s", loggingPath, debugFile);
		
	new Handle:hFile = OpenFile(loggingPath, "a"); // C++ fopen modes
	
	WriteFileLine(hFile, message);
	
	CloseHandle(hFile);
	
	return Plugin_Handled;
}

public PrintToConsoleAll(const String:message[])
{
	for (new i = 1; i <= MaxClients; i++)
	{
		if (!Client_IsValid(i) || !IsClientInGame(i) || IsFakeClient(i))
			continue;
		
		PrintToConsole(i, message);
	}
}

public Action:UpdatePlayersAlive() // Updates g_playersAlive array
{
	new jinraiAlive;
	new nsfAlive;
	
	for (new i = 1; i <= MaxClients; i++)
	{
		#if !defined DEBUG || DEBUG == 0
			if (IsFakeClient(i))
				continue;
		#endif
		
		if (!Client_IsValid(i) || !IsClientInGame(i))
			continue;
		
		if (!IsPlayerAlive(i))
			continue;
		
		new team = GetClientTeam(i);
		
		if (team == TEAM_JINRAI)
			jinraiAlive++;
		
		else if (team == TEAM_NSF)
			nsfAlive++;
	}
	
	g_playersAlive[TEAM_JINRAI] = jinraiAlive;
	g_playersAlive[TEAM_NSF] = nsfAlive;
}

public Action:ResetPlayersAlive() // Reset g_playersAlive array. Only call this on new round start (otherwise we have to do a spawn check to avoid marking unspawned players as dead).
{
	new jinraiPlayers;
	new nsfPlayers;
	
	for (new i = 1; i <= MaxClients; i++)
	{
		#if !defined DEBUG || DEBUG == 0
			if (IsFakeClient(i))
				continue;
		#endif
		
		if (!Client_IsValid(i))
			continue;
		
		new team = GetClientTeam(i);
		
		if (team == TEAM_JINRAI)
			jinraiPlayers++;
		
		else if (team == TEAM_NSF)
			nsfPlayers++;
	}
	
	// We only call this in round start, so it's safe to assume any team players are alive. 
	g_playersAlive[TEAM_JINRAI] = jinraiPlayers;
	g_playersAlive[TEAM_NSF] = nsfPlayers;
}

public Action:ResetGlobalVariables() // Make sure all global variables are reset properly
{
	new i; // for looping arrays
	//new String:errorMsgExplanatoryEnding[] = "These values have now been reset."; // Repeating phrase for error messages below
	
	// Reset global integers
	new correctInt = 0; // Value to check variables against
	
	if (g_jinraiScore != correctInt || g_nsfScore != correctInt || g_roundCount != correctInt || g_timeSinceUnpausedForRejoin != correctInt)
	{	
		/*
		LogError("Global integers not properly reset. \
		g_jinraiScore = %i. g_nsfScore = %i. g_roundCount = %i. g_timeSinceUnpausedForRejoin = %i. \
		These should all be %i. %s", g_jinraiScore, g_nsfScore, g_roundCount, g_timeSinceUnpausedForRejoin, correctInt, errorMsgExplanatoryEnding);
		*/
		g_jinraiScore					= correctInt;
		g_nsfScore						= correctInt;
		g_roundCount					= correctInt;
		g_timeSinceUnpausedForRejoin	= correctInt;
	}
	
	for (i = 0; i < sizeof(g_usedTimeouts); i++)
	{
		if (g_usedTimeouts[i] != correctInt)
		{
			/*
			LogError("Global integers not properly reset. \
			g_usedTimeouts[%i] = %i. This should be %i. %s", i, g_usedTimeouts[i], correctInt, errorMsgExplanatoryEnding);
			*/
			g_usedTimeouts[i] = correctInt;
		}
	}
	
	correctInt = -1;
	
	for (i = 0; i < sizeof(g_assignedTeamWhenLive); i++)
	{	
		if (g_assignedTeamWhenLive[i] != correctInt)
		{
			/*
			LogError("Global integers not properly reset. \
			g_assignedTeamWhenLive[%i] = %i. This should be %i. %s", i, g_assignedTeamWhenLive[i], correctInt, errorMsgExplanatoryEnding);
			*/
			g_assignedTeamWhenLive[i] = correctInt;
		}
	}
	
	// Reset global strings
	for (i = 0; i < sizeof(g_livePlayers); i++)
	{
		if (strlen(g_livePlayers[i]) > 1)
		{
			/*
			LogError("Global strings not properly set. \
			g_livePlayers[%i] = %s. This string should be empty. %s", i, g_livePlayers[i], errorMsgExplanatoryEnding);
			*/
			strcopy(g_livePlayers[i], sizeof(g_livePlayers[]), "");
		}
	}
	
	// Reset global bools
	new bool:correctBool = false; // Value to check variables against
	
	if (g_isExpectingOverride != correctBool || g_isExpectingUnPauseTimer != correctBool || g_isLive != correctBool || g_isPaused != correctBool || g_isSourceTVRecording != correctBool || g_shouldPause != correctBool || g_shouldClientsRecord != correctBool)
	{
		/*
		LogError("Global booleans not properly reset. \
		g_isExpectingOverride = %i. g_isExpectingUnPauseTimer = %i. g_isLive = %i. g_isPaused = %i. g_isSourceTVRecording = %i. g_shouldPause = %i. g_shouldClientsRecord = %i. g_isUnpausedForClientRejoin = %i. \
		These should all be %i. %s", g_isExpectingOverride, g_isExpectingUnPauseTimer, g_isLive, g_isPaused, g_isSourceTVRecording, g_shouldPause, g_shouldClientsRecord, g_isUnpausedForClientRejoin, correctBool, errorMsgExplanatoryEnding);
		*/
		g_isExpectingOverride		= correctBool;
		g_isExpectingUnPauseTimer	= correctBool;
		g_isLive					= correctBool;
		g_isPaused					= correctBool;
		g_isSourceTVRecording		= correctBool;
		g_shouldPause				= correctBool;
		g_shouldClientsRecord		= correctBool;
	}
	
	for (i = 0; i <= MaxClients; i++)
	{
		if (g_isReady[i] != correctBool || g_isSpawned[i] != correctBool)
		{
			/*
			LogError("Global booleans not properly reset. \
			g_isReady[%i] = %i. g_isSpawned[%i] = %i. \
			These should all be %i. %s", i, g_isReady[i], i, g_isSpawned[i], correctBool, errorMsgExplanatoryEnding);
			*/
			g_isReady[i]	= correctBool;
			g_isSpawned[i]	= correctBool;
		}
	}
	
	for (i = 0; i < sizeof(g_teamName); i++)
	{
		if (g_isTeamReadyForUnPause[i] != correctBool || g_isWantingOverride[i] != correctBool)
		{
			/*
			LogError("Global booleans not properly reset. \
			g_isTeamReadyForUnPause[%i] = %i. g_isWantingOverride[%i] = %i. \
			These should all be %i. %s", i, g_isTeamReadyForUnPause[i], i, g_isWantingOverride[i], correctBool, errorMsgExplanatoryEnding);
			*/
			g_isTeamReadyForUnPause[i]	= correctBool;
			g_isWantingOverride[i]		= correctBool;
		}
	}
}

void ToggleClientReadyState(client, verbose = true, doReadyCheck = true)
{
	if (!Client_IsValid(client) || IsFakeClient(client))
		return;
	
	g_isReady[client] = !g_isReady[client];
	
	if (verbose)
	{	
		decl String:clientName[MAX_NAME_LENGTH];
		GetClientName(client, clientName, sizeof(clientName));
		
		decl String:readyState[] = "NOT READY";
		if (g_isReady[client])
			strcopy(readyState, sizeof(readyState), "READY");
		
		PrintToChatAll("%s Player %s is %s.", g_tag, clientName, readyState);
	}
	
	if (doReadyCheck)
	{
		CheckIfEveryoneIsReady();
	}
}